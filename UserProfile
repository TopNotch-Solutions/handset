import React, { useState, useRef, useEffect } from "react";
import "../../../assets/style/admin/profileCard.css";
import profile from "../../../assets/Img/blank-profile-picture-973460_960_720.webp";
import { Typography, useTheme } from "@mui/material";
import CameraAltIcon from "@mui/icons-material/CameraAlt";
import EditIcon from "@mui/icons-material/Edit";
import CloseIcon from "@mui/icons-material/Close";
import Form from "react-bootstrap/Form";
import InputGroup from "react-bootstrap/InputGroup";
import axios from "axios";
import { DataGrid } from "@mui/x-data-grid";
import { Box, IconButton } from "@mui/material";
import { tokens } from "../../../theme";
import DownloadOutlinedIcon from "@mui/icons-material/DownloadOutlined";
import { useSelector, useDispatch } from "react-redux";
import { updateProfileImage } from "../../../store/reducers/authReducer";

function UserProfileCard() {
  const [userDetails, setUserDetails] = useState([]);
  const theme = useTheme();
  const inputRef = useRef();
  const colors = tokens(theme.palette.mode);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadStatus, setUploadStatus] = useState("select");
  const currentUser = useSelector((state) => state.auth.user);
  const [error, setError] = useState("");
  const [profilePic, setProfilePic] = useState("");
  const [newProfilePic, setNewProfilePic] = useState("");
  const dispatch = useDispatch();
  let profileImage;

  const [data, setData] = useState([]);
  const [employeeData, setEmployeeData] = useState([]);

  useEffect(() => {
    if (currentUser && currentUser.ProfileImage) {
      const parsedData = JSON.parse(currentUser.ProfileImage);
      profileImage = parsedData.ProfileImage;
      setProfilePic(profileImage);
      console.log(profileImage);
    }
  }, [currentUser]);

  useEffect(() => {
    fetch("http://localhost:4001/devices")
      .then((res) => res.json())
      .then((data) => setData(data))
      .catch((err) => console.log(err));
  }, []);

  const columns = [
    { field: "id", headerName: "#", width: 50 },
    { field: "HandsetName", headerName: "NAME", width: 490 },
    { field: "Role", headerName: "ROLE", width: 390 },
    { field: "CreatedDate", headerName: "DATE ADDED", width: 180 }
  ];

  const rows = data.map((handset, index) => ({
    id: index + 1,
    HandsetName: handset.HandsetName,
    Role: handset.Role,
    CreatedDate: handset.CreatedDate
  }));

  const convertToBase64 = (file) => {
    var reader = new FileReader();

    reader.readAsDataURL(file);
    reader.onload = () => {
      console.log(reader.result);
      setNewProfilePic(reader.result);
    };
    reader.onerror = error => {
      console.log("Error: ", error);
    };
  }

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      const allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      const validMimeTypes = [
        "image/jpeg", // .jpg and .jpeg
        "image/png"   // .png
      ];

      if (!allowedExtensions.exec(file.name)) {
        setError("Please upload a valid image file with .jpg, .jpeg, or .png extension.");
        setSelectedFile(null);
        return;
      }

      if (!validMimeTypes.includes(file.type)) {
        setError("The file type does not match an image file. Please upload a valid image file.");
        setSelectedFile(null);
        return;
      }

      setError("");
      setSelectedFile(file);
      convertToBase64(file);
    }
  };

  const clearFileInput = () => {
    inputRef.current.value = "";
    setSelectedFile(null);
    setNewProfilePic("");
    setUploadStatus("select");
    setError("");
  };

  const handleFileUpload = async () => {
    if (uploadStatus === "done") {
      clearFileInput();
      return;
    }
  
    try {
      setUploadStatus("uploading");
  
      const response = await fetch(`http://localhost:4000/image/${currentUser.EmployeeCode}/profilePicture`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
          "Access-Control-Allow-Origin": "*"
        },
        body: JSON.stringify({
          ProfileImage: newProfilePic
        })
      });
  
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
  
      const data = await response.json();
      console.log('Upload successful:', data.ProfileImage);
  
      // Update local state with new ProfileImage
      setProfilePic(data.ProfileImage);
  
      // Optionally update Redux state if needed
      dispatch(updateProfileImage({ ProfileImage: data.ProfileImage }));
      setSelectedFile(null);
    setNewProfilePic("");
    setUploadStatus("select");
  
      
  
    } catch (error) {
      console.error('Upload failed:', error);
      setUploadStatus("select");
    }
  };
  

  const handleCameraClick = () => {
    inputRef.current.click();
  };

  return (
    <div className="container-main m-3">
      <div className="row d-flex flex-column flex-md-row justify-content-around m-auto">
        <div className="col-12  col-lg-5 rounded-3 shadow p-4 d-flex flex-column justify-content-center align-items-center b-g me-3">
          <div className="position-relative">
            <div className="bg-white rounded-circle position-absolute camera-top d-flex align-items-center justify-content-center" style={{ width: '30px', height: '30px', cursor: "pointer" }} onClick={selectedFile ? clearFileInput : handleCameraClick}>
              {selectedFile ? <CloseIcon style={{ width: '24px', height: '24px', color: '#1674BB' }} /> : <CameraAltIcon style={{ width: '24px', height: '24px', color: '#1674BB' }} />}
            </div>
            <img
              src={selectedFile ? newProfilePic : (profilePic || profile)}
              className="circular-image img-responsive img-thumbnail"
              alt=""
            />
            <input
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              ref={inputRef}
              onChange={handleFileChange}
            />
          </div>
          {error && (
            <p className="error-text mt-4 mb-4 error-text text-center">
              {error}
            </p>
          )}
          {selectedFile && (
            <>
              <button className="upload-btn mb-3" onClick={handleFileUpload}>
                {uploadStatus === "select" || uploadStatus === "uploading"
                  ? "Upload Image"
                  : "Done"}
              </button>
            </>
          )}
          <h3 className="mt-2 text-center">{currentUser.FullName}</h3>
          <p>{currentUser.Position}</p>
        </div>
        <div
          className="col-12 col-lg-6 rounded-3 shadow b-g mt-3 mt-lg-0 me-3 "
          style={{ padding: 0 }}
        >
          <div
            className="bg-color d-flex align-items-center p-3"
            style={{ borderRadius: "0.35rem 0.35rem 0rem 0rem" }}
          >
            <h3 className="p-3 text-col">Edit Profile</h3>
            <div
              className="bg-white rounded-circle camera-top d-flex align-items-center justify-content-center mb-4"
              style={{ width: "24px", height: "24px" }}
              onClick={clearFileInput}
            >
              <EditIcon
                style={{ width: "16px", height: "16px", color: "#1674BB" }}
              />
            </div>
          </div>
          <form className="mt-3">
            <div className="row d-flex justify-content-around">
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">First Name</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="firstname"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="firstname"
                    name="firstname"
                    value={currentUser.FirstName}
                    disabled
                  />
                </InputGroup>
              </div>
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Surname</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="surname"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="surname"
                    name="surname"
                    value={currentUser.LastName}
                    disabled
                  />
                </InputGroup>
              </div>
            </div>
            <div className="row d-flex justify-content-around">
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Email Address</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="email"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="email"
                    name="email"
                    value={currentUser.Email}
                    disabled
                  />
                </InputGroup>
              </div>
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Mobile Number</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="mobile"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="mobile"
                    name="mobile"
                    value={currentUser.PhoneNumber}
                    disabled
                  />
                </InputGroup>
              </div>
            </div>
            <div className="row d-flex justify-content-around">
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Address</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="address"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="address"
                    name="address"
                    value={currentUser.ResidentialAddress}
                    disabled
                  />
                </InputGroup>
              </div>
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Gender</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="gender"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="gender"
                    name="gender"
                    value={currentUser.Gender}
                    disabled
                  />
                </InputGroup>
              </div>
              
            </div>
            <div className="row d-flex justify-content-around">
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Department</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="address"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="address"
                    name="address"
                    value={currentUser.Department}
                    disabled
                  />
                </InputGroup>
              </div>
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Category</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="gender"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="gender"
                    name="gender"
                    value={currentUser.EmploymentCategory}
                    disabled
                  />
                </InputGroup>
              </div>
              
            </div>
            <div className="row d-flex justify-content-around">
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">Start Date</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="address"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="address"
                    name="address"
                    value={currentUser.EmploymentStartDate}
                    disabled
                  />
                </InputGroup>
              </div>
              <div className="col-5">
                <label htmlFor="exampleInputEmail1">End Date</label>
                <InputGroup className="mb-3">
                  <Form.Control
                    aria-label="gender"
                    aria-describedby="basic-addon1"
                    type="text"
                    id="gender"
                    name="gender"
                    value={currentUser.EmploymentEndDate}
                    disabled
                  />
                </InputGroup>
              </div>
              
            </div>

            <div className="row d-flex justify-content-start p-4">
              <button
                type="button"
                className="button2"
                // onClick={handleUpdateInfo}
              >
                Update Info
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserProfileCard;
